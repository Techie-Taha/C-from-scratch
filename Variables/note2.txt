___1___

#include <iostream> // iostream(input output stream) is just a file from standard library
using namespace std;
int main() {
    cout << "4+2"; //nothing will change since just a string, 4+2 in the terminal
    cout << endl;
    cout << 4; // nothing will change since just a integer, 4 in the terminal
    cout << endl;
    cout << 4+2; // will add on, 6 in the terminal
    cout << endl;
    cout << "4"; // nothing will change since just a string, 4+2 in the terminal

    return 0;
}

___2___
#include <iostream> // iostream(input output stream) is just a file from standard library
using namespace std;
int main() {
    int x; // here x is a varible which is an integer. This is how we write, like int x means x variable. 
    x = 5; // now inside of this varible or container we have a number, which is 5
    // cout << x*5; // we can add, substract, multiply and divide like this 
// don't do "x", it will print x, since it's a string
    
    int z;
    z = 8; // we can define multiple variables
    cout << x;
    cout << endl;
    cout << z;
    cout << endl;
    cout << x+z; // we can also print it like this, like + - * /. But make sure to write the cout statement once you are done defining variable
    return 0;

}

___3___
more ways of defining mutiple variable
#include <iostream> 
using namespace std;
int main() {
    int x; // instead of writing like this we could do int x = 5;
    x = 5; // instead of writing like this we could do int x = 5;
    int z; // instead of writing like this we could do int z = 8;
    z = 8; // instead of writing like this we could do int z = 8;
    cout << x;
    cout << endl;
    cout << z;
    cout << endl;
    cout << x+z; 
    return 0;

}

___4___
Integers
// instead of writing like that we can also do,
#include <iostream>
using namespace std;
int main() {

int x,y;
x = 5;
z = 8;
cout << x << endl << z; // in the terminal we will see 5 then in the next line 6
}

___5___

we could also write 
#include <iostream> 
using namespace std;
int main() {
int x = 5, z = 8; 
cout << x+y; // we can also print it like this, like + - * /.
return 0; 
}

NOTE = We can do both declaration and initialization in the same line

___6___
updation of integers
#include <iostream> // iostream(input output stream) is just a file from standard library
using namespace std;
int main() {
    int x = 5;
    cout << x <<endl; 
    x = 8;
    cout <<x;

return 0; 

}
-----Another one 
#include <iostream> // iostream(input output stream) is just a file from standard library
using namespace std;
int main() {
    int x = 5;
    cout << x <<endl; 
    x = x+8; // first it will print out 5, then 13, like we updated the value of x
    cout <<x;

return 0; 


}

___7___
arithmetic operator between int and float
#include <iostream> 
using namespace std;
int main() {
    int x = 5; // it's x = 5 
    x+=5; // now it's x = 10
    cout << x << endl; // printed x = 10 in the terminal
    x+=5; // now x = 15
    cout << x << endl; // printed x = 15 in the terminal
    float y = 6.1; // y = 6.1
    cout << x << endl << y << endl; // printed x = 15, y = 6.1 in the next line
    y+=1; // now y = 7.1
    cout << x/y; // 15  divided 7.1 which us 2.11268  in the terminal

// arithmetic operation between float and integers
return 0;

}
---8---
float and updation of float is same as integers
#include <iostream> 
using namespace std;
int main() {
    float y = 6.1; 
    //cout << y << endl;
    y+=1;
    cout << y; 

return 0;


}
___9___
Post Pre increment
#include <iostream> 
using namespace std;
int main() {
    int x = 6; 
    cout << x << endl; // 6 in the terminal
// example of post increment
    cout << x++ << endl; // first it will print 6 again, then will increment the value by one 
    cout << x << endl; // here will print 7

    int y = 7; 
    cout << y << endl; // 7 in the terminal
// example of pre increment
    cout << ++y << endl; // first, it will increment the value by one then will print 8
    cout << y << endl; // here will print 8 again

return 0;
}
___10___
Varibale naming rules
commas and blanks are not allowed. Names that are not allowed is auto, double, int, break, extern, enum, unsigned, while, case, sizeof, for, const, static, 
long, continue, float, else, signed, do, short, switch, char, volatile, default, goto, struct, if, union, return, void, register, typeof

___11___
taking input
#include <iostream> 
using namespace std;
int main() {

    int x;
    cin >> x; // cin >> x; ask the user to enter anything, let's say we put 6
    cout << x*x*x; // in the terminal we will see the cube root of 6 which is 216



return 0;
}
Also finding the sum 
#include <iostream> 
using namespace std;
int main() {

    int x, y;
    cout << "Enter number x: "; // dont have to put endl
    cin >> x; // cin >> x; ask the user to enter anything, let's we put 6
    cout << "Enter number y: ";
    cin >> y;

    cout << "The sum is " << x+y;



return 0;
}

___12___
modulus operator helps o find the remainder, let's say 2 % 6. So 2 as a numerator and and 6 denominator. 
#include <iostream> 
using namespace std;
int main() {

    int x, y;
    cout << "Enter number x: "; // dont have to put endl
    cin >> x; // cin >> x; ask the user to enter anything, let's we put 6
    cout << "Enter number y: ";
    cin >> y;

    cout << "The answer is " << x%y; // x = 9, y = 3, like 9 over 3, in the terminal we will see 0, since there's no remainder. it's called remainder in python


return 0;
}
//important points : 2 % 8 = 2, because if we divide it we get some decimal values and we don't want that. 
// 6 % -5 = 1, like even though we have -5, in the terminal we will see 1
// -6 % 5 = -1, but if we have - value at the front, in the terminal we will see - as an answer

___13___

type casting; where we basically we convert int values into decimal
// Take integer 'x' as input and print half of the number
#include <iostream> 
using namespace std;
int main() {

    int x;
    x = 5;
    float y = (float)x;
    cout << y/2; // in the terminal we see 2.5
    //cout << x; // in the terminal we see 2, 

/* but the answer was supposed to be 2.5, we can fix it by converting int to float but according to question it has
to int, so we have to use typecasting.
*/


return 0;
}

___14___
Hierarchy operator or precedence
#include <iostream> 
using namespace std;
int main() {
    float b;
    b = 7/22*(3.14+2)*3/5; 
    
    
    // first the operation within the the bracket will happen which is 5.14, then it will perform the operation from left to right
    //7/22 which is 0.3181818182 multiplied by 5.14 then multipled by 3 then divided by 5
    cout << b << endl; // in the terminal we will see 0

    int a; 
    a = 4 + 2 % -8; // just like division multiplication, modulus operator also have first priority.
    //  2 % -8 where 2 is divided by 8, where the remainder is in decimal and we don't want that. So output is 2 then added by 4. 
    cout << a;

return 0;
}
___15___ 
char data type 
#include <iostream> 
using namespace std;
int main() {
    char x; // deine as char
    x = 'a'; // write in a single quote
    cout << x; // in the terminal we will see a



return 0;
}
// use the data type char first of all to define a variable, and make sure to write it in single quote

___16___
ASCII values
// remember these 3 values, lowwr case a = 97, upper case A = 65, 0 = 48
#include <iostream> 
using namespace std;
int main() {
    char x;
    x = '8';
    int y = (int)x; // so we used typecasting to find the ascii value of character '8'
    cout << y;
// first define a character, then use type casting to convert it's value into ascii value


   
return 0;
}